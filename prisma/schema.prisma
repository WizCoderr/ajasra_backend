generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  email      String        @unique
  password   String
  fullName   String
  phone      String
  address    Address?
  role       Role         @default(USER)
  orders     Order[]
  cart       Cart?
  wishlist   UserWishlist[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  images       String[]
  categoryId   String         @db.ObjectId
  category     Category       @relation(fields: [categoryId], references: [id])
  sizes        String[]
  colors       String[]
  material     String
  fit          Fit            @default(REGULAR)
  brand        String 
  inStock      Boolean        @default(true)
  featured     Boolean        @default(false)
  orderItems   OrderItem[]
  cartItems    CartItem[]
  wishlistedBy UserWishlist[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([categoryId])
  @@index([featured])
}



model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id])
  items            OrderItem[]
  subtotal         Float
  tax              Float
  shipping         Float
  total            Float
  status           OrderStatus   @default(PENDING)
  shippingAddress  Address
  billingAddress   Address?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  size      String
  color     String
  price     Float
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, size, color])
}

model UserWishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Slider{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String
}

type Address {
  street     String
  city       String
  state      String
  postalCode String
  country    String
}

enum Role { 
  USER
  ADMIN
}

enum Fit {
  SLIM
  REGULAR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
